{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/utils/db.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) throw new Error('Missing MONGODB_URI in .env.local');\n\nlet cached = global.mongoose || { conn: null, promise: null };\n\nasync function connectDB() {\n  console.log(\"Connecting to MongoDB...\");\n  if (cached.conn) return cached.conn;\n\n  cached.promise = cached.promise || \n    mongoose.connect(MONGODB_URI).then(mongoose => mongoose);\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa,MAAM,IAAI,MAAM;AAElC,IAAI,SAAS,OAAO,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE5D,eAAe;IACb,QAAQ,GAAG,CAAC;IACZ,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,OAAO,OAAO,GAAG,OAAO,OAAO,IAC7B,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAA,WAAY;IAEjD,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/models/userModel.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: { type: String, unique: true, required: true },\n  password: String,\n  createdAt: { type: Date, default: Date.now },\n  role: { type: String, enum: ['student', 'tutor'], default: 'student' },\n  coursesEnrolled: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Enrollment' }],\n});\n\nexport default mongoose.models.User || mongoose.model('User', UserSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,MAAM;IACN,OAAO;QAAE,MAAM;QAAQ,QAAQ;QAAM,UAAU;IAAK;IACpD,UAAU;IACV,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC3C,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAW;SAAQ;QAAE,SAAS;IAAU;IACrE,iBAAiB;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAa;KAAE;AAChF;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/models/courseModel.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst CourseSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  description: String,\n  thumbnailUrl: String,\n  tutor: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  videos: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Video' }],\n  enrolledStudents: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n \n}, {\n  timestamps: true\n});\n\nexport default mongoose.models.Course || mongoose.model('Course', CourseSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,eAAe,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,aAAa;IACb,cAAc;IACd,OAAO;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC3E,QAAQ;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAQ;KAAE;IAChE,kBAAkB;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAO;KAAE;AAE3E,GAAG;IACD,YAAY;AACd;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/models/enrollmentModel.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst EnrollmentSchema = new mongoose.Schema({\n  studentId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  courseId: { type: mongoose.Schema.Types.ObjectId, ref: 'Course', required: true },\n  enrolledAt: { type: Date, default: Date.now },\n  progress: { type: Number, default: 0 }\n});\n\nexport default mongoose.models.Enrollment || mongoose.model('Enrollment', EnrollmentSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,mBAAmB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAC3C,WAAW;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC/E,UAAU;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAU,UAAU;IAAK;IAChF,YAAY;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC5C,UAAU;QAAE,MAAM;QAAQ,SAAS;IAAE;AACvC;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,UAAU,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,cAAc","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/app/api/dashboard/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport dbConnect from '../../../utils/db.js';\nimport User from '../../../models/userModel.js';\nimport Course from '../../../models/courseModel.js';\nimport Enrollment from '../../../models/enrollmentModel.js';\nimport jwt from 'jsonwebtoken';\n\nexport async function GET(request) {\n  try {\n    await dbConnect();\n    \n    // Get token from cookies\n    const token = request.cookies.get('authToken')?.value;\n    \n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized - No token provided' }, { status: 401 });\n    }\n    \n    // Verify token\n    let decoded;\n    try {\n      decoded = jwt.verify(token, process.env.JWT_SECRET);\n    } catch (err) {\n      return NextResponse.json({ message: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n    \n    // Find the tutor\n    const tutor = await User.findOne({ \n      _id: decoded.userId,\n      role: 'tutor' \n    });\n\n    if (!tutor) {\n      return NextResponse.json({ \n        message: \"Unauthorized - User is not a tutor\" \n      }, { status: 403 });\n    }\n\n    // Find all courses created by this tutor\n    const tutorCourses = await Course.find({ tutor: tutor._id });\n\n    if (!tutorCourses.length) {\n      return NextResponse.json({ \n        message: \"No courses found for this tutor\", \n        data: [] \n      });\n    }\n\n    // Get all course IDs\n    const courseIds = tutorCourses.map(course => course._id);\n\n    // Count enrollments per course \n    const enrollmentCounts = await Enrollment.aggregate([\n      { $match: { courseId: { $in: courseIds } } },\n      { $group: { _id: \"$courseId\", studentCount: { $sum: 1 } } }\n    ]);\n\n    // Create a map of courseId -> enrollment count for faster lookup\n    const enrollmentMap = {};\n    enrollmentCounts.forEach(item => {\n      enrollmentMap[item._id.toString()] = item.studentCount;\n    });\n    \n    // Format the response with course details and stats\n    const coursesWithStats = tutorCourses.map(course => {\n      const courseId = course._id.toString();\n      return {\n        courseId: course._id,\n        title: course.title,\n        description: course.description,\n        thumbnailUrl: course.thumbnailUrl,\n        createdAt: course.createdAt,\n        updatedAt: course.updatedAt,\n        stats: {\n          enrolledStudents: enrollmentMap[courseId] || 0\n        }\n      };\n    });\n\n    return NextResponse.json({\n      message: \"Tutor courses retrieved successfully\",\n      data: coursesWithStats\n    });\n\n  } catch (error) {\n    console.error(\"Error fetching tutor courses:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch tutor courses\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAS,AAAD;QAEd,yBAAyB;QACzB,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,cAAc;QAEhD,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAmC,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,eAAe;QACf,IAAI;QACJ,IAAI;YACF,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU;QACpD,EAAE,OAAO,KAAK;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACtF;QAEA,iBAAiB;QACjB,MAAM,QAAQ,MAAM,4HAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAC/B,KAAK,QAAQ,MAAM;YACnB,MAAM;QACR;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,yCAAyC;QACzC,MAAM,eAAe,MAAM,8HAAA,CAAA,UAAM,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,GAAG;QAAC;QAE1D,IAAI,CAAC,aAAa,MAAM,EAAE;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,MAAM,EAAE;YACV;QACF;QAEA,qBAAqB;QACrB,MAAM,YAAY,aAAa,GAAG,CAAC,CAAA,SAAU,OAAO,GAAG;QAEvD,gCAAgC;QAChC,MAAM,mBAAmB,MAAM,kIAAA,CAAA,UAAU,CAAC,SAAS,CAAC;YAClD;gBAAE,QAAQ;oBAAE,UAAU;wBAAE,KAAK;oBAAU;gBAAE;YAAE;YAC3C;gBAAE,QAAQ;oBAAE,KAAK;oBAAa,cAAc;wBAAE,MAAM;oBAAE;gBAAE;YAAE;SAC3D;QAED,iEAAiE;QACjE,MAAM,gBAAgB,CAAC;QACvB,iBAAiB,OAAO,CAAC,CAAA;YACvB,aAAa,CAAC,KAAK,GAAG,CAAC,QAAQ,GAAG,GAAG,KAAK,YAAY;QACxD;QAEA,oDAAoD;QACpD,MAAM,mBAAmB,aAAa,GAAG,CAAC,CAAA;YACxC,MAAM,WAAW,OAAO,GAAG,CAAC,QAAQ;YACpC,OAAO;gBACL,UAAU,OAAO,GAAG;gBACpB,OAAO,OAAO,KAAK;gBACnB,aAAa,OAAO,WAAW;gBAC/B,cAAc,OAAO,YAAY;gBACjC,WAAW,OAAO,SAAS;gBAC3B,WAAW,OAAO,SAAS;gBAC3B,OAAO;oBACL,kBAAkB,aAAa,CAAC,SAAS,IAAI;gBAC/C;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}