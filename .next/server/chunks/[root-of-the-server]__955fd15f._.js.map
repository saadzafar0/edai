{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/utils/db.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) throw new Error('Missing MONGODB_URI in .env.local');\n\nlet cached = global.mongoose || { conn: null, promise: null };\n\nasync function connectDB() {\n  console.log(\"Connecting to MongoDB...\");\n  if (cached.conn) return cached.conn;\n\n  cached.promise = cached.promise || \n    mongoose.connect(MONGODB_URI).then(mongoose => mongoose);\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa,MAAM,IAAI,MAAM;AAElC,IAAI,SAAS,OAAO,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE5D,eAAe;IACb,QAAQ,GAAG,CAAC;IACZ,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,OAAO,OAAO,GAAG,OAAO,OAAO,IAC7B,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAA,WAAY;IAEjD,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/models/userModel.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: { type: String, unique: true, required: true },\n  password: String,\n  createdAt: { type: Date, default: Date.now },\n  role: { type: String, enum: ['student', 'tutor'], default: 'student' },\n  coursesEnrolled: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Enrollment' }],\n});\n\nexport default mongoose.models.User || mongoose.model('User', UserSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,MAAM;IACN,OAAO;QAAE,MAAM;QAAQ,QAAQ;QAAM,UAAU;IAAK;IACpD,UAAU;IACV,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC3C,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAW;SAAQ;QAAE,SAAS;IAAU;IACrE,iBAAiB;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAa;KAAE;AAChF;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/models/courseModel.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst CourseSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  description: String,\n  thumbnailUrl: String,\n  tutor: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  videos: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Video' }],\n  enrolledStudents: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n \n}, {\n  timestamps: true\n});\n\nexport default mongoose.models.Course || mongoose.model('Course', CourseSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,eAAe,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,aAAa;IACb,cAAc;IACd,OAAO;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC3E,QAAQ;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAQ;KAAE;IAChE,kBAAkB;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAO;KAAE;AAE3E,GAAG;IACD,YAAY;AACd;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/models/enrollmentModel.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst EnrollmentSchema = new mongoose.Schema({\n  studentId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  courseId: { type: mongoose.Schema.Types.ObjectId, ref: 'Course', required: true },\n  enrolledAt: { type: Date, default: Date.now },\n  progress: { type: Number, default: 0 }\n});\n\nexport default mongoose.models.Enrollment || mongoose.model('Enrollment', EnrollmentSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,mBAAmB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAC3C,WAAW;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC/E,UAAU;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAU,UAAU;IAAK;IAChF,YAAY;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC5C,UAAU;QAAE,MAAM;QAAQ,SAAS;IAAE;AACvC;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,UAAU,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,cAAc","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/models/videoModel.js"],"sourcesContent":["import mongoose from 'mongoose';\n\n\nconst VideoSchema = new mongoose.Schema({\n  courseId: { type: mongoose.Schema.Types.ObjectId, ref: 'Course', required: true },\n  title: { type: String, required: true },\n  videoUrl: { type: String, required: true },\n  transcript: [new mongoose.Schema({\n    text: String,\n    start: Number,\n    end: Number,\n  }, { _id: false })],\n  uploadedAt: { type: Date, default: Date.now },\n  thumbnailUrl: String\n});\n\nexport default mongoose.models.Video || mongoose.model('Video', VideoSchema);\n"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,UAAU;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAU,UAAU;IAAK;IAChF,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,YAAY;QAAC,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;YAC/B,MAAM;YACN,OAAO;YACP,KAAK;QACP,GAAG;YAAE,KAAK;QAAM;KAAG;IACnB,YAAY;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC5C,cAAc;AAChB;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/app/api/dashboard/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport dbConnect from '../../../utils/db.js';\nimport User from '../../../models/userModel.js';\nimport Course from '../../../models/courseModel.js';\nimport Enrollment from '../../../models/enrollmentModel.js';\nimport Video from '../../../models/videoModel.js';\nimport jwt from 'jsonwebtoken';\n\nexport async function GET(request) {\n  try {\n    await dbConnect();\n    const token = request.cookies.get('authToken')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized - No token provided' }, { status: 401 });\n    }\n    let decoded;\n    try {\n      decoded = jwt.verify(token, process.env.JWT_SECRET);\n    } catch (err) {\n      return NextResponse.json({ message: 'Unauthorized - Invalid token' }, { status: 401 });\n    }\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return NextResponse.json({ message: 'User not found' }, { status: 404 });\n    }\n    if (user.role === 'tutor') {\n      // Tutor dashboard data\n      const tutorCourses = await Course.find({ tutor: user._id });\n      const courseIds = tutorCourses.map(course => course._id);\n      const enrollmentCounts = await Enrollment.aggregate([\n        { $match: { courseId: { $in: courseIds } } },\n        { $group: { _id: \"$courseId\", studentCount: { $sum: 1 } } }\n      ]);\n      const enrollmentMap = {};\n      enrollmentCounts.forEach(item => {\n        enrollmentMap[item._id.toString()] = item.studentCount;\n      });\n      // Calculate total students (unique)\n      const allEnrollments = await Enrollment.find({ courseId: { $in: courseIds } });\n      const uniqueStudentIds = new Set(allEnrollments.map(e => e.studentId.toString()));\n      // Calculate total videos\n      let totalVideos = 0;\n      tutorCourses.forEach(course => {\n        if (Array.isArray(course.videos)) {\n          totalVideos += course.videos.length;\n        }\n      });\n      // Calculate average rating (dummy for now)\n      const averageRating = null;\n      // Get recent activity (e.g., recent enrollments)\n      const recentEnrollments = await Enrollment.find({ courseId: { $in: courseIds } })\n        .sort({ enrolledAt: -1 })\n        .limit(5)\n        .populate('studentId', 'name');\n      const recentActivity = recentEnrollments.map(e => ({\n        title: 'New Enrollment',\n        description: `${e.studentId.name} enrolled in a course`,\n        timestamp: e.enrolledAt.toISOString()\n      }));\n      // Build detailed course list\n      const courseList = tutorCourses.map(course => ({\n        id: course._id,\n        title: course.title,\n        description: course.description,\n        thumbnailUrl: course.thumbnailUrl,\n        createdAt: course.createdAt,\n        students: enrollmentMap[course._id.toString()] || 0,\n        videos: Array.isArray(course.videos) ? course.videos.length : 0\n      }));\n      return NextResponse.json({\n        name: user.name,\n        role: 'tutor',\n        totalCourses: tutorCourses.length,\n        totalStudents: uniqueStudentIds.size,\n        totalVideos,\n        averageRating,\n        recentActivity,\n        courses: courseList\n      });\n    } else if (user.role === 'student') {\n      // Student dashboard data\n      // Find enrollments for this student\n      const enrollments = await Enrollment.find({ studentId: user._id });\n      // Find enrolled courses\n      const enrolledCourseIds = enrollments.map(e => e.courseId);\n      const enrolledCourses = await Course.find({ _id: { $in: enrolledCourseIds } });\n      // Calculate videos watched (dummy for now)\n      const videosWatched = 0;\n      // Calculate overall progress (dummy for now)\n      const overallProgress = '0%';\n      // Get recent activity (e.g., recent enrollments)\n      const recentEnrollments = await Enrollment.find({ studentId: user._id })\n        .sort({ enrolledAt: -1 })\n        .limit(5)\n        .populate('courseId', 'title');\n      const recentActivity = recentEnrollments.map(e => ({\n        title: 'Course Enrollment',\n        description: `Enrolled in ${e.courseId.title}`,\n        timestamp: e.enrolledAt.toISOString()\n      }));\n      return NextResponse.json({\n        name: user.name,\n        role: 'student',\n        enrolledCourses,\n        videosWatched,\n        overallProgress,\n        recentActivity\n      });\n    } else {\n      return NextResponse.json({ message: 'Invalid user role' }, { status: 400 });\n    }\n  } catch (error) {\n    console.error(\"Error fetching dashboard data:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch dashboard data\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}