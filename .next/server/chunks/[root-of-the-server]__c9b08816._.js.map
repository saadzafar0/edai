{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/utils/db.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) throw new Error('Missing MONGODB_URI in .env.local');\n\nlet cached = global.mongoose || { conn: null, promise: null };\n\nasync function connectDB() {\n  console.log(\"Connecting to MongoDB...\");\n  if (cached.conn) return cached.conn;\n\n  cached.promise = cached.promise || \n    mongoose.connect(MONGODB_URI).then(mongoose => mongoose);\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa,MAAM,IAAI,MAAM;AAElC,IAAI,SAAS,OAAO,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE5D,eAAe;IACb,QAAQ,GAAG,CAAC;IACZ,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,OAAO,OAAO,GAAG,OAAO,OAAO,IAC7B,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAA,WAAY;IAEjD,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/models/courseModel.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst CourseSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  description: String,\n  thumbnailUrl: String,\n  tutor: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  videos: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Video' }],\n  enrolledStudents: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n \n}, {\n  timestamps: true\n});\n\nexport default mongoose.models.Course || mongoose.model('Course', CourseSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,eAAe,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,aAAa;IACb,cAAc;IACd,OAAO;QAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC3E,QAAQ;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAQ;KAAE;IAChE,kBAAkB;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAO;KAAE;AAE3E,GAAG;IACD,YAAY;AACd;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,UAAU","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/app/api/course/%5BcourseId%5D/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport dbConnect from '@/utils/db';\nimport Course from '@/models/courseModel';\n\nexport async function GET(request) {\n  try {\n    const courseId = request.url.split('/').pop();\n    await dbConnect();\n\n    const course = await Course.findById(courseId);\n    if (!course) {\n      return NextResponse.json({ message: 'Course not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ course });\n  } catch (error) {\n    console.error('Error fetching course details:', error);\n    return NextResponse.json({ message: 'Failed to fetch course details' }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,MAAM,WAAW,QAAQ,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG;QAC3C,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,SAAS,MAAM,8HAAA,CAAA,UAAM,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACxF;AACF","debugId":null}}]
}