{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/lib/edgestore.ts"],"sourcesContent":["'use client';\n \nimport { type EdgeStoreRouter } from '../app/api/edgestore/[...edgestore]/route';\nimport { createEdgeStoreProvider } from '@edgestore/react';\n \nconst { EdgeStoreProvider, useEdgeStore } =\n  createEdgeStoreProvider<EdgeStoreRouter>();\n \nexport { EdgeStoreProvider, useEdgeStore };"],"names":[],"mappings":";;;;AAGA;AAHA;;AAKA,MAAM,EAAE,iBAAiB,EAAE,YAAY,EAAE,GACvC,CAAA,GAAA,sJAAA,CAAA,0BAAuB,AAAD","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///run/media/saad/Local%20Disk/impSTUFF/edai/src/context/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useRouter } from 'next/navigation';\n\ninterface User {\n  id: string;\n  email: string;\n  role: 'student' | 'tutor';\n  name: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  signup: (email: string, password: string, role: 'student' | 'tutor', name: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    checkSession();\n  }, []);\n\n  const checkSession = async () => {\n    try {\n      const response = await fetch('/api/auth/session', {\n        credentials: 'include'\n      });\n      const data = await response.json();\n      \n      if (data.user) {\n        setUser(data.user);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n        credentials: 'include'\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to login');\n      }\n\n      if (data.user) {\n        setUser(data.user);\n        router.push(data.user.role === 'tutor' ? '/dashboard' : '/courseBrowse');\n      }\n    } catch (error: any) {\n      throw new Error(error.message || 'Failed to login');\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      setUser(null);\n      router.push('/');\n    } catch (error) {\n      throw new Error('Failed to logout');\n    }\n  };\n\n  const signup = async (email: string, password: string, role: 'student' | 'tutor', name: string) => {\n    try {\n      const response = await fetch('/api/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, role, name }),\n        credentials: 'include'\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to sign up');\n      }\n\n      if (data.user) {\n        setUser(data.user);\n        router.push('/dashboard');\n      }\n    } catch (error: any) {\n      throw new Error(error.message || 'Failed to sign up');\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, logout, signup }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAoBA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAA2B;IAChE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,MAAM,eAAe;QACnB,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,qBAAqB;gBAChD,aAAa;YACf;YACA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,KAAK,IAAI,EAAE;gBACb,QAAQ,KAAK,IAAI;YACnB,OAAO;gBACL,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ;QACV,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,QAAQ,OAAO,OAAe;QAClC,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,cAAc;gBACzC,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE;oBAAO;gBAAS;gBACvC,aAAa;YACf;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,KAAK,OAAO,IAAI;YAClC;YAEA,IAAI,KAAK,IAAI,EAAE;gBACb,QAAQ,KAAK,IAAI;gBACjB,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,UAAU,eAAe;YAC1D;QACF,EAAE,OAAO,OAAY;YACnB,MAAM,IAAI,MAAM,MAAM,OAAO,IAAI;QACnC;IACF;IAEA,MAAM,SAAS;QACb,IAAI;YACF,MAAM,MAAM,oBAAoB;gBAC9B,QAAQ;gBACR,aAAa;YACf;YACA,QAAQ;YACR,OAAO,IAAI,CAAC;QACd,EAAE,OAAO,OAAO;YACd,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,MAAM,SAAS,OAAO,OAAe,UAAkB,MAA2B;QAChF,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,eAAe;gBAC1C,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE;oBAAO;oBAAU;oBAAM;gBAAK;gBACnD,aAAa;YACf;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM,KAAK,OAAO,IAAI;YAClC;YAEA,IAAI,KAAK,IAAI,EAAE;gBACb,QAAQ,KAAK,IAAI;gBACjB,OAAO,IAAI,CAAC;YACd;QACF,EAAE,OAAO,OAAY;YACnB,MAAM,IAAI,MAAM,MAAM,OAAO,IAAI;QACnC;IACF;IAEA,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAS;YAAO;YAAQ;QAAO;kBACjE;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}